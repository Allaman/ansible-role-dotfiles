---
- name: Check if dotfiles directory is present
  stat:
    path: "{{ dotfiles.public.path }}"
  register: stat_result
  when: dotfiles.public.enabled|default(false) == true

- name: Clone dotfiles from repo
  git:
    repo: "{{ dotfiles.public.repo_url }}"
    dest: "{{ dotfiles.public.path }}"
  when: not stat_result.stat.exists and dotfiles.public.enabled|default(false) == true

- name: Pull dotfiles from repo
  shell: git pull
  args:
    chdir: "{{ dotfiles.public.path }}"
  when: stat_result.stat.exists and dotfiles.public.enabled|default(false) == true

- name: Link dotfiles and exclude meta files
  command: rcup -d "{{ dotfiles.public.path }}" -f '{% for arg1 in dotfiles.public.excluded_files %}-x {{arg1 }}{% if not loop.last %}{% endif %} {% endfor %}' #-x README -x LICENSE -x screenshot.png
  when: dotfiles.public.enabled|default(false) == true

- name: Check if private dotfiles directory is present
  stat:
    path: "{{ dotfiles.private.path }}"
  register: stat_result
  when: dotfiles.private.enabled|default(false) == true

- name: Clone dotfiles from repo
  git:
    repo: "{{ dotfiles.private.repo_url }}"
    dest: "{{ dotfiles.private.path }}"
  when: not stat_result.stat.exists and dotfiles.private.enabled|default(false) == true

- name: Pull dotfiles from repo
  shell: git pull
  args:
    chdir: "{{ dotfiles.private.path }}"
  when: stat_result.stat.exists and dotfiles.private.enabled|default(false) == true

- name: Link dotfiles and exclude meta files
  command: rcup -d "{{ dotfiles.private.path }}" -f '{% for arg1 in dotfiles.private.excluded_files %}-x {{arg1 }}{% if not loop.last %}{% endif %} {% endfor %}' #-x README -x LICENSE -x screenshot.png
  when: dotfiles.private.enabled|default(false) == true
